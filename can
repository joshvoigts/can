#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'open3'

class Can
   def self.start
      self.new.run!
   end

   def run!
      @options = {}
      parser = OptionParser.new do |opts|
         opts.banner = "usage: can [options] file ..."

         opts.on("-v", "--verbose", "Run verbosely") do |v|
            @options[:verbose] = v
         end

         opts.on("-l", "--list", "List trash contents") do |l|
            @options[:list] = l
         end

         opts.on("-E", "--empty", "Empty trash") do |e|
            @options[:empty] = e
         end

         opts.on_tail("-h", "--help", "Show this message") do
            puts opts
            exit
         end

         if ARGV.none?
            puts opts
            exit
         end
      end
      parser.parse!
      list_trash if @options[:list]
      empty_trash! if @options[:empty]
      trash_files!
   end

   def files_in_trash
      entries = Dir.entries("#{ENV['HOME']}/.Trash")
      entries.delete_if {|e| e == '.' || e == '..' }
      entries
   end

   def list_trash
      if files_in_trash.none?
         puts "Trash is empty"
      else
         files_in_trash.each {|f| puts "#{f}" }
      end
      exit
   end

   def empty_trash!
      files = files_in_trash
      `osascript -e 'tell application "Finder" to empty trash'`
      if @options[:verbose]
         puts "Deleted from trash:"
         files.each {|f| puts "  #{f}"}
      else
         puts "Trash emptied"
      end
      exit
   end

   def trash_files!
      to_delete = []
      ARGV.each do |arg|
         if File.exists? arg
            to_delete << File.expand_path(arg)
         else
            $stderr.puts "can: #{arg}: No such file or directory"
            exit
         end
      end
      as_list = "{ POSIX file \"" + to_delete.join("\", POSIX file \"") + "\"}"
      as_cmd =  "tell application \"Finder\" to delete #{as_list}"
      Open3.popen3('osascript', '-e', as_cmd) do |stdin, stdout, stderr|
         err = stderr.read
         raise "AppleScript Error: #{err}" if err != ''
      end
      if @options[:verbose]
         ARGV.each {|arg| puts "Moved file to trash: #{arg}" }
      end
      dir_path = File.dirname(to_delete[0])
      remove_ds_store!(dir_path)
   end

   def remove_ds_store!(dir_path)
      file_path = "#{dir_path}/.DS_Store" 
      FileUtils.rm file_path if File.exists? file_path
   end
end

Can.start
